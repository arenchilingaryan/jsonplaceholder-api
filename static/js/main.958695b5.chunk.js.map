{"version":3,"sources":["index.js"],"names":["UserComponent","_url","state","persons","term","infoStatus","moreInfo","onSearchChange","e","target","value","setState","search","items","length","filter","item","name","toLowerCase","indexOf","map","i","id","clearSearch","axios","get","this","then","res","data","itemsToMap","elementInfo","elem","key","className","username","email","phone","address","street","suite","city","zipcode","renderInfo","type","onClick","onChange","placeholder","person","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"kUAwBqBA,E,2MAEnBC,KAAO,6C,EAEPC,MAAQ,CACNC,QAAS,GACTC,KAAM,GACNC,YAAY,EACZC,SAAU,I,EAaZC,eAAiB,SAACC,GAChB,IAAMJ,EAAOI,EAAEC,OAAOC,MACtB,EAAKC,SAAS,CAAEP,U,EAElBQ,OAAS,SAACC,EAAOT,GACf,OAAoB,IAAhBA,EAAKU,OACAD,EAEFA,EAAME,QAAO,SAACC,GACnB,OAAOA,EAAKC,KAAKC,cAAcC,QAAQf,EAAKc,gBAAkB,M,EAIlEZ,SAAW,SAACE,GACV,EAAKN,MAAMC,QAAQiB,KAAI,SAACC,GAClBb,EAAEC,OAAOa,IAAMD,EAAEC,IACnB,EAAKX,SAAS,CAAEL,SAAU,CAACe,GAAIhB,YAAY,Q,EAKjDkB,YAAc,kBAAM,EAAKZ,SAAS,CAAEP,KAAM,M,mFA/BrB,IAAD,OAClBoB,IAAMC,IAAIC,KAAKzB,MACZ0B,MAAK,SAACC,GACL,EAAKjB,SAAS,CACZR,QAASyB,EAAIC,KACbxB,YAAY,S,+BA4BV,IAAD,OAEDyB,EAAaJ,KAAKd,OAAOc,KAAKxB,MAAMC,QAASuB,KAAKxB,MAAME,MAExD2B,EAAcL,KAAKxB,MAAMI,SAASc,KAAI,SAACY,GAC3C,OACE,yBAAKC,IAAKD,EAAME,UAAU,aACxB,4BAAKF,EAAKf,MACV,2BAAG,wCAAH,IAAqBe,EAAKG,UAC1B,2BAAG,sCAAeH,EAAKI,OACvB,2BAAG,qCAAH,IAAkBJ,EAAKK,OACvB,2BAAG,uCAAgBL,EAAKM,QAAQC,QAChC,2BAAG,sCAAeP,EAAKM,QAAQE,OAC/B,2BAAG,qCAAcR,EAAKM,QAAQG,MAC9B,2BAAG,wCAAiBT,EAAKM,QAAQI,aAIjCC,EAAajB,KAAKxB,MAAMG,WAAa0B,EAAc,wBAAIG,UAAU,aAAd,oBACzD,OACE,yBAAKA,UAAU,kBACb,4CACA,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,uBACb,4BAAQU,KAAK,SAASV,UAAU,mBAAmBW,QAASnB,KAAKH,aAC/D,qCAGJ,2BACEuB,SAAUpB,KAAKnB,eACfG,MAAOgB,KAAKxB,MAAME,KAClBwC,KAAK,OACLV,UAAU,eACVa,YAAY,kBAGhB,yBAAKb,UAAU,aACb,6BACE,qCACA,wBAAIA,UAAU,cACXJ,EAAWV,KAAI,SAAA4B,GAAM,OAAI,wBAAIf,IAAKe,EAAO1B,GAAIuB,QAAS,EAAKvC,SAAUgB,GAAI0B,EAAO1B,GAAIY,UAAU,mBAC7F,0BAAMZ,GAAI0B,EAAO1B,IAAI,uBAAGA,GAAI0B,EAAO1B,IAAd,KAAwB0B,EAAO1B,IACpD,0BAAMA,GAAI0B,EAAO1B,IAAI,uBAAGA,GAAI0B,EAAO1B,IAAd,UAA6B0B,EAAO/B,MACzD,0BAAMK,GAAI0B,EAAO1B,GAAIY,UAAU,mBAAkB,uBAAGZ,GAAI0B,EAAO1B,IAAd,WAA8B0B,EAAOX,aAI3FM,Q,GA3FgCM,aAsG3C,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBALhB,WACE,OAAO,kBAACtD,EAAD,QAIO,MAASkD,I","file":"static/js/main.958695b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./styles.css\";\nimport axios from 'axios';\n\n/**\n  Instructions\n\n  1 Fetch the users from api - https://jsonplaceholder.typicode.com/users\n  2 Display the users in a list (`Name - Email` or similar)\n  3 Add the feature to search through users from search box by name.\n    - Search should filter upon change in the input\n  4 Add the feature to clear the search box and reset the user list to show all\n  5 Add the feature that, when a user is clicked, display the that users info as a selected user\n\n  Please use all resources you want to, this is a fully open-book\n  challenge. Google away.\n\n  Don't be overly concerned with error handling, etc. This is a small evaluation.\n  Feel free to add dependencies to the left if you need them.\n**/\n\n\nexport default class UserComponent extends Component {\n\n  _url = \"https://jsonplaceholder.typicode.com/users\"\n\n  state = {\n    persons: [],\n    term: '',\n    infoStatus: false,\n    moreInfo: []\n  }\n\n  componentDidMount() {\n    axios.get(this._url)\n      .then((res) => {\n        this.setState({\n          persons: res.data,\n          infoStatus: false\n        })\n      })\n  }\n\n  onSearchChange = (e) => {\n    const term = e.target.value;\n    this.setState({ term });\n  }\n  search = (items, term) => {\n    if (term.length === 0) {\n      return items;\n    }\n    return items.filter((item) => {\n      return item.name.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    })\n  }\n\n  moreInfo = (e) => {\n    this.state.persons.map((i) => {\n      if (e.target.id == i.id) {\n        this.setState({ moreInfo: [i], infoStatus: true })\n      }\n    })\n  }\n\n  clearSearch = () => this.setState({ term: '' })\n\n  render() {\n\n    const itemsToMap = this.search(this.state.persons, this.state.term)\n\n    const elementInfo = this.state.moreInfo.map((elem) => {\n      return (\n        <div key={elem} className=\"infoPanel\" >\n          <h1>{elem.name}</h1>\n          <p><b>Username:</b> {elem.username}</p>\n          <p><b>Email: </b>{elem.email}</p>\n          <p><b>Phone:</b> {elem.phone}</p>\n          <p><b>Street: </b>{elem.address.street}</p>\n          <p><b>Suite: </b>{elem.address.suite}</p>\n          <p><b>City: </b>{elem.address.city}</p>\n          <p><b>Zipcode: </b>{elem.address.zipcode}</p>\n        </div>\n      )\n    })\n    const renderInfo = this.state.infoStatus ? elementInfo : <h2 className=\"infoPanel\">Chose the person</h2>\n    return (\n      <div className=\"container mt-5\">\n        <h2>Search Users</h2>\n        <div className=\"input-group mb-5 mt-3\">\n          <div className=\"input-group-prepend\">\n            <button type=\"button\" className=\"input-group-text\" onClick={this.clearSearch}>\n              <span>X</span>\n            </button>\n          </div>\n          <input\n            onChange={this.onSearchChange}\n            value={this.state.term}\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search Users\"\n          />\n        </div>\n        <div className=\"gridPanel\">\n          <div>\n            <h4>Users</h4>\n            <ul className=\"list-group\">\n              {itemsToMap.map(person => <li key={person.id} onClick={this.moreInfo} id={person.id} className=\"list-group-item\">\n                <span id={person.id}><b id={person.id}>#</b>{person.id}</span>\n                <span id={person.id}><b id={person.id}>name: </b>{person.name}</span>\n                <span id={person.id} className=\"list-group-span\"><b id={person.id}>phone: </b>{person.phone}</span>\n              </li>)}\n            </ul>\n          </div>\n          {renderInfo}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return <UserComponent />;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}